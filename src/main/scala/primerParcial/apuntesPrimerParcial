// var funcion : (Int, Int) => Int
//funcion = _+2*_
//funcion(2,3)

//funcion = (x,y) => if(x>0) x else x*y
//funcion(-3,4 // Llama un método de f, f es un objeto

//Asociatividad izquierda en los llamados a las funciones

//f : Int => (Int, Int) => Int //Función de f, toma un parámetro y devuelve una función y este devuelve dos parámetros
//f : Int => Int => Int => Int //Función de f, toma un parámetro y devuelve una función y este devuelve un parámetro Int

//g(3)(4,5) //Toma un parámetro y devuelve una función que toma dos parámetros que es un Int
//g : Int => (Int, Int) => Int

//f : Int => (Int => (Int => Int))
//f : (Int => Int) => (Int => Int)
//f : ((Int => Int) => Int) =< Int
//f : Int => ((Int => Int) => Int)

// f(3,4)
// def f(a,b) = a+b
// f : (Int, Int) => Int
// b : Int => Int => Int

//def b(x:Int) = (y:Int) => x + y
//def b(x:Int)(y:Int) = x + y //forma final de escribir b

//j(4,5)(6,7)
//j : (Int,Int) => (Int,Int) => Int // Se manda los parámetros de dos en dos
//Existen 2 funciones la 1ra es j


